{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WISP This project is developed by Competitive Programming McGill . WISP is a project aimed at creating a fluid and fun experience for members of Compete McGill to learn competitive programming.","title":"Introduction"},{"location":"#wisp","text":"This project is developed by Competitive Programming McGill . WISP is a project aimed at creating a fluid and fun experience for members of Compete McGill to learn competitive programming.","title":"WISP"},{"location":"getting_started/","text":"Getting Started Work in progress :) Check the tab of the specific microservice that you'd like to work with for more information on it.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Work in progress :) Check the tab of the specific microservice that you'd like to work with for more information on it.","title":"Getting Started"},{"location":"microservices/problems/","text":"Problems Among other functionality, WISP hosts an evolving set of problems and problem sets for users to attempt, and tracks their progress. The purpose of this microservice is to manage all data and logic relating to these problems and problem sets. Project layout src/ # Contains all source code config/ controllers/ database/ interactions/ models/ interfaces/ routes/ util/ validators/ app.ts server.ts docs/ index.md # This documentation page. ... # Other markdown pages, images and other files. Dockerfile docker-compose.yaml mkdocs.yml # Configuration for these docs LICENSE nodemon.json package.json package-lock.json swaggerDoc.js tsconfig.json tslint.json Getting Started For Development Requirements docker docker-compose Running Clone the repository, and navigate to the root of the project. Then run: npm start For Production Requirements docker Build Clone the repository, and navigate to the root of the project. Then run: docker build -t wisp-problems-microservice:latest docker run --rm -d -p 3000 :3000 wisp-problems-microservice Sample Usage ProblemSets List all ProblemSets Query parameters * includeProblems=true : for each problem set returned, includes an array of problems belonging to that problem set as the field problems Request: curl --request GET \\ --url 'http://localhost:3000/problemSets' Response: [ { \"tags\" : [ \"Graph Theory\" , \"Other Tag\" ], \"_id\" : \"5eb855b2cf015c0062d71f88\" , \"title\" : \"Test Problem Set 1\" , \"description\" : \"This is a test problem set!\" , \"createdAt\" : \"2020-05-10T19:27:46.233Z\" , \"updatedAt\" : \"2020-05-10T19:27:46.233Z\" , \"__v\" : 0 } ] Get specific ProblemSet Query parameters * includeProblems=true : includes an array of problems belonging to the specified problem set as the field problems Request: curl --request GET \\ --url http://localhost:3000/problemSets/5eb855b2cf015c0062d71f88 Response: { \"tags\" : [ \"Graph Theory\" , \"Other Tag\" ], \"_id\" : \"5eb855b2cf015c0062d71f88\" , \"title\" : \"Test Problem Set 1\" , \"description\" : \"This is a test problem set!\" , \"createdAt\" : \"2020-05-10T19:27:46.233Z\" , \"updatedAt\" : \"2020-05-10T19:27:46.233Z\" , \"__v\" : 0 } Create ProblemSet Request: curl --request POST \\ --url http://localhost:3000/problemSets \\ --header 'content-type: application/json' \\ --data '{ \"title\" : \"Test Problem Set 1\", \"description\" : \"This is a test problem set!\", \"tags\" : [\"Graph Theory\", \"Other Tag\"] }' Response: { \"tags\" : [ \"Graph Theory\" , \"Other Tag\" ], \"_id\" : \"5eb855b2cf015c0062d71f88\" , \"title\" : \"Test Problem Set 1\" , \"description\" : \"This is a test problem set!\" , \"createdAt\" : \"2020-05-10T19:27:46.233Z\" , \"updatedAt\" : \"2020-05-10T19:27:46.233Z\" , \"__v\" : 0 } Problems List all Problems Request: curl --request GET \\ --url http://localhost:3000/problems Response: [ { \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 } ] Get specific Problem Request: curl --request GET \\ --url http://localhost:3000/problems/5eb8570217271500be61b2c9 Response: { \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 } Create Problem Request: curl --request POST \\ --url http://localhost:3000/problems \\ --header 'content-type: application/json' \\ --data '{ \"title\": \"Test Problem 1: Special Permutation\", \"source\":\"CODEFORCES\", \"sourceLink\":\"https://codeforces.com/problemset/problem/1352/G\", \"problemSetIds\": [\"5eb855b2cf015c0062d71f88\"], \"problemMetadata\": { \"platformProblemId\":\"1352G\", \"difficulty\":\"easy\" } }' Response: { \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 } Problems exists The id that is used in this requests URL is a custom ID that can be generated by concatenating the platform (\"CODEFORCES\") and the problem ID as displayed on the platform (\"1352G\"), and then taking the SHA-1 hash of the resulting string. Request: curl --request GET \\ --url http://localhost:3000/problems/6e88ec57160cd8164d9460a9885fbece7047c13c/exists Response: { \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 }","title":"Problems"},{"location":"microservices/problems/#problems","text":"Among other functionality, WISP hosts an evolving set of problems and problem sets for users to attempt, and tracks their progress. The purpose of this microservice is to manage all data and logic relating to these problems and problem sets.","title":"Problems"},{"location":"microservices/problems/#project-layout","text":"src/ # Contains all source code config/ controllers/ database/ interactions/ models/ interfaces/ routes/ util/ validators/ app.ts server.ts docs/ index.md # This documentation page. ... # Other markdown pages, images and other files. Dockerfile docker-compose.yaml mkdocs.yml # Configuration for these docs LICENSE nodemon.json package.json package-lock.json swaggerDoc.js tsconfig.json tslint.json","title":"Project layout"},{"location":"microservices/problems/#getting-started","text":"","title":"Getting Started"},{"location":"microservices/problems/#for-development","text":"Requirements docker docker-compose Running Clone the repository, and navigate to the root of the project. Then run: npm start","title":"For Development"},{"location":"microservices/problems/#for-production","text":"Requirements docker Build Clone the repository, and navigate to the root of the project. Then run: docker build -t wisp-problems-microservice:latest docker run --rm -d -p 3000 :3000 wisp-problems-microservice","title":"For Production"},{"location":"microservices/problems/#sample-usage","text":"","title":"Sample Usage"},{"location":"microservices/problems/#problemsets","text":"","title":"ProblemSets"},{"location":"microservices/problems/#list-all-problemsets","text":"Query parameters * includeProblems=true : for each problem set returned, includes an array of problems belonging to that problem set as the field problems Request: curl --request GET \\ --url 'http://localhost:3000/problemSets' Response: [ { \"tags\" : [ \"Graph Theory\" , \"Other Tag\" ], \"_id\" : \"5eb855b2cf015c0062d71f88\" , \"title\" : \"Test Problem Set 1\" , \"description\" : \"This is a test problem set!\" , \"createdAt\" : \"2020-05-10T19:27:46.233Z\" , \"updatedAt\" : \"2020-05-10T19:27:46.233Z\" , \"__v\" : 0 } ]","title":"List all ProblemSets"},{"location":"microservices/problems/#get-specific-problemset","text":"Query parameters * includeProblems=true : includes an array of problems belonging to the specified problem set as the field problems Request: curl --request GET \\ --url http://localhost:3000/problemSets/5eb855b2cf015c0062d71f88 Response: { \"tags\" : [ \"Graph Theory\" , \"Other Tag\" ], \"_id\" : \"5eb855b2cf015c0062d71f88\" , \"title\" : \"Test Problem Set 1\" , \"description\" : \"This is a test problem set!\" , \"createdAt\" : \"2020-05-10T19:27:46.233Z\" , \"updatedAt\" : \"2020-05-10T19:27:46.233Z\" , \"__v\" : 0 }","title":"Get specific ProblemSet"},{"location":"microservices/problems/#create-problemset","text":"Request: curl --request POST \\ --url http://localhost:3000/problemSets \\ --header 'content-type: application/json' \\ --data '{ \"title\" : \"Test Problem Set 1\", \"description\" : \"This is a test problem set!\", \"tags\" : [\"Graph Theory\", \"Other Tag\"] }' Response: { \"tags\" : [ \"Graph Theory\" , \"Other Tag\" ], \"_id\" : \"5eb855b2cf015c0062d71f88\" , \"title\" : \"Test Problem Set 1\" , \"description\" : \"This is a test problem set!\" , \"createdAt\" : \"2020-05-10T19:27:46.233Z\" , \"updatedAt\" : \"2020-05-10T19:27:46.233Z\" , \"__v\" : 0 }","title":"Create ProblemSet"},{"location":"microservices/problems/#problems_1","text":"","title":"Problems"},{"location":"microservices/problems/#list-all-problems","text":"Request: curl --request GET \\ --url http://localhost:3000/problems Response: [ { \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 } ]","title":"List all Problems"},{"location":"microservices/problems/#get-specific-problem","text":"Request: curl --request GET \\ --url http://localhost:3000/problems/5eb8570217271500be61b2c9 Response: { \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 }","title":"Get specific Problem"},{"location":"microservices/problems/#create-problem","text":"Request: curl --request POST \\ --url http://localhost:3000/problems \\ --header 'content-type: application/json' \\ --data '{ \"title\": \"Test Problem 1: Special Permutation\", \"source\":\"CODEFORCES\", \"sourceLink\":\"https://codeforces.com/problemset/problem/1352/G\", \"problemSetIds\": [\"5eb855b2cf015c0062d71f88\"], \"problemMetadata\": { \"platformProblemId\":\"1352G\", \"difficulty\":\"easy\" } }' Response: { \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 }","title":"Create Problem"},{"location":"microservices/problems/#problems-exists","text":"The id that is used in this requests URL is a custom ID that can be generated by concatenating the platform (\"CODEFORCES\") and the problem ID as displayed on the platform (\"1352G\"), and then taking the SHA-1 hash of the resulting string. Request: curl --request GET \\ --url http://localhost:3000/problems/6e88ec57160cd8164d9460a9885fbece7047c13c/exists Response: { \"problemMetadata\" : { \"platformProblemId\" : \"1352G\" , \"difficulty\" : \"easy\" }, \"problemSetIds\" : [ \"5eb855b2cf015c0062d71f88\" ], \"_id\" : \"5eb8570217271500be61b2c9\" , \"title\" : \"Test Problem 1: Special Permutation\" , \"source\" : \"CODEFORCES\" , \"sourceLink\" : \"https://codeforces.com/problemset/problem/1352/G\" , \"problemId\" : \"6e88ec57160cd8164d9460a9885fbece7047c13c\" , \"createdAt\" : \"2020-05-10T19:33:22.888Z\" , \"updatedAt\" : \"2020-05-10T19:33:22.888Z\" , \"__v\" : 0 }","title":"Problems exists"},{"location":"microservices/users/","text":"Users The purpose of this microservice is to manage all logic relating to users and to privide OAuth2.0-compliant authorization endpoints. Since WISP allows users to solve problems across multiple sites (such as Codeforces and Katis), it is this microservice's role to collect and keep the user's information in-sync across all sites. Project layout src/ ............. # source code config/ controllers/ database/ interactions/ models/ interfaces/ routes/ util/ validators/ app.ts server.ts test/ ............. # unit tests controllers/ Dockerfile docker-compose.yaml docker-compose.test.yaml LICENSE nodemon.json package.json package-lock.json swaggerDoc.js tsconfig.json tslint.json Getting Started For Development Requirements gcloud kubectl docker docker-compose Available Commands Command Description npm start spins up a MongoDB instance as well as your API server through docker-compose (see docker-compose.yaml). Be sure that ports 27017 and 3000 are unused by other services npm run start:local runs a nodemon server that listens for changes in the src directory (requires nodemon and ts-node) npm run start:prod starts the API server in the production env. Must be run after npm run build (requires node and tsc) npm run test runs unit tests on new instances of MongoDB and the API (see docker-compose.test.yaml). Once the tests finish running, both instances stop npm run test:local runs unit tests without docker and MongoDB (requires nyc, mocha, and ts-node) npm run build builds the API for production and outputs the result in dist/ (requires tsc) npm run lint lints the src directory according to tslint.json and tsconfig.json Running Login to a gcloud account that has access to our cluster on GKE $ gcloud auth login <EMAIL> Connect to our wisp-prod cluster $ gcloud container clusters get-credentials wisp-prod --zone northamerica-northeast1-c --project wisp-276819 Use port forwarding to get access to the problems microservice (this will keep running in foreground by default) # we don't currently have a dev namespace so prod will be used intermittently $ kubectl port-forward -n prod deploy/wisp-problems 3001 :3000 NOTE: steps 1 through 3 can be skipped by running a local copy of the problems microservice with docker or node (keep in mind that the default mongodb url for the problems microservice is mongodb://mongo:27017) Clone the repository , and navigate to the root of the project. run: npm i npm start see npm start in Available Commands Sample Usage For a more extensive documentation, visit the swagger docs Auth POST /auth/login Body { \"email\" : \"example@gmail.com\" , \"password\" : \"password\" } Responses Status Response 200 {\"token\": \"jwt token\", \"user\": {...}} 400 Invalid email or passowrd 422 Missing or invalid email/password 500 Internal server error POST /auth/introspect Params token: JWT token to introspect Responses Status Response 200 {\"active\": true, \"user\": {...}} 401 Unauthorized Users Model { username : String , email : String password : String , role : String , info : { major : String , year : String , school : String , bio : String , profilePhoto : String , } , problemSets : [ ObjectId ] , problems : [ { problemId: String, isComplete: Boolean, status: String, }, ] , platformData : { codeforces : { username : String , email : String , lastSubmission : { problemId : String , isComplete : Boolean , status : String , } , } , } , createdAt : Date , updatedAt : Date } GET /users Responses Status Response 200 Array of users 500 Internal server error GET /users/{userId} Params userId: ID for user to fetch Responses Status Response 200 User 404 User not found 422 Missing or invalid userId 500 Internal server error POST /users Body See user model Responses Status Response 200 User 400 User already exists 422 Missing or invalid params in body 500 Internal server error PUT /users/{userId} Params userId: ID for user to update Body See user model Responses Status Response 200 User 404 User not found 422 Missing or invalid userId/params in body 500 Internal server error DELETE /users/{userId} Params userId: ID for user to delete Responses Status Response 200 Empty 404 User not found 422 Missing or invalid userId 500 Internal server error PATCH /users/{userId}/problems Params userId: ID for user to update Body { \"problemId\" : \"ObjectId\" } Responses Status Response 200 User 404 User not found 422 Missing or invalid userId/problemId in body 500 Internal server error PATCH /users/{userId}/problemSets Params userId: ID for user to update Body { \"problemSetId\" : \"ObjectId\" } Responses Status Response 200 User 404 User not found 422 Missing or invalid userId/problemSetId in body 500 Internal server error","title":"Users"},{"location":"microservices/users/#users","text":"The purpose of this microservice is to manage all logic relating to users and to privide OAuth2.0-compliant authorization endpoints. Since WISP allows users to solve problems across multiple sites (such as Codeforces and Katis), it is this microservice's role to collect and keep the user's information in-sync across all sites.","title":"Users"},{"location":"microservices/users/#project-layout","text":"src/ ............. # source code config/ controllers/ database/ interactions/ models/ interfaces/ routes/ util/ validators/ app.ts server.ts test/ ............. # unit tests controllers/ Dockerfile docker-compose.yaml docker-compose.test.yaml LICENSE nodemon.json package.json package-lock.json swaggerDoc.js tsconfig.json tslint.json","title":"Project layout"},{"location":"microservices/users/#getting-started","text":"","title":"Getting Started"},{"location":"microservices/users/#for-development","text":"Requirements gcloud kubectl docker docker-compose Available Commands Command Description npm start spins up a MongoDB instance as well as your API server through docker-compose (see docker-compose.yaml). Be sure that ports 27017 and 3000 are unused by other services npm run start:local runs a nodemon server that listens for changes in the src directory (requires nodemon and ts-node) npm run start:prod starts the API server in the production env. Must be run after npm run build (requires node and tsc) npm run test runs unit tests on new instances of MongoDB and the API (see docker-compose.test.yaml). Once the tests finish running, both instances stop npm run test:local runs unit tests without docker and MongoDB (requires nyc, mocha, and ts-node) npm run build builds the API for production and outputs the result in dist/ (requires tsc) npm run lint lints the src directory according to tslint.json and tsconfig.json Running Login to a gcloud account that has access to our cluster on GKE $ gcloud auth login <EMAIL> Connect to our wisp-prod cluster $ gcloud container clusters get-credentials wisp-prod --zone northamerica-northeast1-c --project wisp-276819 Use port forwarding to get access to the problems microservice (this will keep running in foreground by default) # we don't currently have a dev namespace so prod will be used intermittently $ kubectl port-forward -n prod deploy/wisp-problems 3001 :3000 NOTE: steps 1 through 3 can be skipped by running a local copy of the problems microservice with docker or node (keep in mind that the default mongodb url for the problems microservice is mongodb://mongo:27017) Clone the repository , and navigate to the root of the project. run: npm i npm start see npm start in Available Commands","title":"For Development"},{"location":"microservices/users/#sample-usage","text":"For a more extensive documentation, visit the swagger docs","title":"Sample Usage"},{"location":"microservices/users/#auth","text":"POST /auth/login Body { \"email\" : \"example@gmail.com\" , \"password\" : \"password\" } Responses Status Response 200 {\"token\": \"jwt token\", \"user\": {...}} 400 Invalid email or passowrd 422 Missing or invalid email/password 500 Internal server error POST /auth/introspect Params token: JWT token to introspect Responses Status Response 200 {\"active\": true, \"user\": {...}} 401 Unauthorized","title":"Auth"},{"location":"microservices/users/#users_1","text":"Model { username : String , email : String password : String , role : String , info : { major : String , year : String , school : String , bio : String , profilePhoto : String , } , problemSets : [ ObjectId ] , problems : [ { problemId: String, isComplete: Boolean, status: String, }, ] , platformData : { codeforces : { username : String , email : String , lastSubmission : { problemId : String , isComplete : Boolean , status : String , } , } , } , createdAt : Date , updatedAt : Date } GET /users Responses Status Response 200 Array of users 500 Internal server error GET /users/{userId} Params userId: ID for user to fetch Responses Status Response 200 User 404 User not found 422 Missing or invalid userId 500 Internal server error POST /users Body See user model Responses Status Response 200 User 400 User already exists 422 Missing or invalid params in body 500 Internal server error PUT /users/{userId} Params userId: ID for user to update Body See user model Responses Status Response 200 User 404 User not found 422 Missing or invalid userId/params in body 500 Internal server error DELETE /users/{userId} Params userId: ID for user to delete Responses Status Response 200 Empty 404 User not found 422 Missing or invalid userId 500 Internal server error PATCH /users/{userId}/problems Params userId: ID for user to update Body { \"problemId\" : \"ObjectId\" } Responses Status Response 200 User 404 User not found 422 Missing or invalid userId/problemId in body 500 Internal server error PATCH /users/{userId}/problemSets Params userId: ID for user to update Body { \"problemSetId\" : \"ObjectId\" } Responses Status Response 200 User 404 User not found 422 Missing or invalid userId/problemSetId in body 500 Internal server error","title":"Users"}]}